name: Build and Push Docker Image

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug build context
        run: |
          echo "=== Files in build context ==="
          ls -la
          echo "=== Checking entrypoint.sh specifically ==="
          ls -la entrypoint.sh || echo "❌ entrypoint.sh not found in checkout"
          file entrypoint.sh || echo "❌ Cannot check entrypoint.sh file type"
          head -3 entrypoint.sh || echo "❌ Cannot read entrypoint.sh"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: meshcore-web:test
          # Disable cache to test if it's a caching issue
          no-cache: true

      - name: Test container startup
        run: |
          # Debug: Check the built image
          echo "=== Checking built image ==="
          docker images meshcore-web:test

          # Debug: Check if entrypoint exists in the image
          echo "=== Checking entrypoint in image ==="
          docker run --rm meshcore-web:test ls -la / | grep entrypoint || echo "❌ entrypoint.sh not found in root"
          docker run --rm meshcore-web:test ls -la /entrypoint.sh || echo "❌ entrypoint.sh not found"
          docker run --rm meshcore-web:test cat /entrypoint.sh | head -3 || echo "❌ Cannot read file"

          # Try different approaches to check the file
          echo "=== Alternative checks ==="
          docker run --rm meshcore-web:test find / -name "entrypoint*" 2>/dev/null || echo "No entrypoint files found"
          docker run --rm meshcore-web:test which sh || echo "sh not found"
          docker run --rm meshcore-web:test which bash || echo "bash not found"
          
          # Test entrypoint with explicit shell
          echo "=== Testing entrypoint with explicit shell ==="
          docker run --rm meshcore-web:test /bin/sh -c "ls -la /entrypoint.sh" || echo "Cannot access entrypoint with sh"

          # Start the container
          echo "=== Starting container ==="
          docker run -d --name meshcore-test -p 8080:80 meshcore-web:test

          # Check container status immediately
          echo "=== Container status ==="
          docker ps -a --filter name=meshcore-test

          # Show container logs
          echo "=== Container logs ==="
          docker logs meshcore-test

          # Wait for container to be ready (if it started successfully)
          if docker ps --filter name=meshcore-test --filter status=running | grep -q meshcore-test; then
            echo "=== Container is running, testing endpoints ==="
            timeout 120 bash -c 'until curl -f http://localhost:8080/health; do echo "Waiting for container..."; sleep 2; done'
            
            # Test the health endpoint
            curl -f http://localhost:8080/health
            
            # Test that we get HTML content (loading page or actual app)
            response=$(curl -s http://localhost:8080/)
            if echo "$response" | grep -qi "html\|<title\|<head\|<body"; then
              echo "✅ HTML content found"
            else
              echo "❌ No HTML content found"
              exit 1
            fi
            
            # Test version endpoint if available
            curl -s http://localhost:8080/version || echo "Version endpoint not yet available"
          else
            echo "❌ Container failed to start"
            exit 1
          fi

          # Clean up
          docker stop meshcore-test || true
          docker rm meshcore-test || true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
