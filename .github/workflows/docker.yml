name: Build and Push Docker Image

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: meshcore-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container startup
        run: |
          # Start the container
          docker run -d --name meshcore-test -p 8080:80 meshcore-web:test

          # Give the container time to start and run the entrypoint
          echo "Waiting for container to initialize..."
          sleep 10

          # Check container status
          echo "Container status:"
          docker ps -a --filter name=meshcore-test

          # Check container logs
          echo "Container logs:"
          docker logs meshcore-test

          # Wait for container to be ready (extended timeout for slow networks)
          echo "Waiting for health endpoint..."
          timeout 180 bash -c 'until curl -f http://localhost:8080/health; do echo "Waiting for container..."; sleep 5; done'

          # Test the health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health

          # Test that we get some HTML content (could be loading page or actual app)
          echo "Testing main page..."
          response=$(curl -s http://localhost:8080/)
          echo "Response preview: ${response:0:200}..."

          if echo "$response" | grep -qi "html\|<title\|<head\|<body"; then
            echo "✅ HTML content found"
            
            # Check if it's the loading page or actual app
            if echo "$response" | grep -qi "Loading MeshCore\|MeshCore.*Loading"; then
              echo "📄 Loading page is being served (expected during startup)"
            elif echo "$response" | grep -qi "meshcore"; then
              echo "🎉 Actual MeshCore application is being served"
            else
              echo "📄 Some HTML content is being served"
            fi
          else
            echo "❌ No HTML content found"
            echo "Full response: $response"
            exit 1
          fi

          # Test version endpoint if available
          echo "Testing version endpoint..."
          version_response=$(curl -s http://localhost:8080/version || echo "Version endpoint not available")
          echo "Version info: $version_response"

          # Show final container logs for debugging
          echo "Final container logs:"
          docker logs meshcore-test

          # Clean up
          docker stop meshcore-test
          docker rm meshcore-test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
